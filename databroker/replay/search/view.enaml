"""Enaml definitions for the search views"""

import six

from enaml.widgets.api import (Container, RadioButton, PushButton, Window,
                               ScrollArea, Form, Label, GroupBox, SpinBox,
                               Html)
from enaml.core.api import (Looper, Conditional)
from enaml.stdlib.fields import IntField
from enaml.layout.api import vbox, hbox, spacer, Box


enamldef DisplayDict(Container):
    """Enaml definition for the widget that displays a dictionary as a form
    """
    attr display_dict
    Form:
        padding = Box(0, 0, 0, 0)
        row_spacing = 5
        Looper:
            iterable << sorted(display_dict)
            Label:
                text = loop_item
            Label:
                text = str(display_dict[loop_item])

enamldef LastView(Window):
    """Enaml definition for the widget that displays the controls for searching
    the databroker for the last N runs
    """
    attr model
    Container:
        padding = Box(0, 0, 0, 0)
        # GUI element that selects the number of run headers to display
        SpinBox: selector:
            prefix = "Display "
            suffix = " run(s)"
            minimum = 1
            value := model.num_to_retrieve
        # GUI element that allows for different runs to be selected
        Container: begin_run_events:
            Looper:
                iterable << model.begin_run_events
                RadioButton:
                    text = '{}: {}'.format(loop_item.scan_id,
                                           loop_item.time_as_datetime)
                    clicked ::
                        model.selected = loop_item
        # GUI Element to show a Run Summary and the corresponding Data Keys
        GroupBox:
            padding = Box(0, 0, 0, 0)
            title = "Run Summary"
            title_align = 'center'
            flat = True
            DisplayDict:
                padding = Box(0, 0, 0, 10)
                display_dict << model.selected_as_dict
            GroupBox:
                title = "Data Keys"
                title_align = 'center'
                flat = True
                DisplayDict:
                    padding = Box(0, 0, 0, 0)
                    display_dict << model.selected_keys
